import React  from 'react';

function OtherNumber({addCom,totalChipValues,updateTotalChipValue,setTotalChipValues,singleChipValue, winNumber}) {
    const prefix = "otherNumber"
    var listofNumber = [
        [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, '2-1'],
        [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, '2-1'],
        [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, '2-1']
    ];

    //this approach update totalChipValue locally, because useState is asynchronous, the totalChipValue 
    //generated by setTotalChipValue can not be immidiately updated
    const otherNumberClick = (num, rowIndex, colIndex, event) => {
        const id = `${prefix}_${rowIndex}_${colIndex}`;
        const selectedNum = (colIndex !== 12) ? [num] : listofNumber[rowIndex].slice(0, -1);
        const odd = (colIndex !== 12)?35:2;
        const totalChipValue = (totalChipValues[id] || 0) + singleChipValue;
        updateTotalChipValue(id);
        addCom(selectedNum, id, odd, totalChipValue, event);
    };

    const removeOtherNumberClick = (num, rowIndex, colIndex, event) => {
        event.preventDefault(); // Prevent the default context menu
        const id = `${prefix}_${rowIndex}_${colIndex}`;
        const odd = 35;
        const selectedNum = (colIndex !== 12) ? [num] : listofNumber[rowIndex].slice(0, -1);
        const totalChipValue = totalChipValues[id] || 0;
        addCom(selectedNum, id, odd, totalChipValue, event);
        // Toggle chip visibility based on right-click event
        if (event.button === 2 && totalChipValue > 0) {
            const updatedTotalChipValues = { ...totalChipValues }; // Copy the state
            updatedTotalChipValues[id] = 0; // Set chip value to 0
            setTotalChipValues(updatedTotalChipValues); // Update the state
        }
    };

    return (
        <div className="otherNumber">
            {listofNumber.map((row, rowIndex) => (
                <div key={rowIndex} id={`otherNumberRow_${rowIndex}`} className='otherNumberRow'>
                    {row.map((num, colIndex) => (
                        <div key={colIndex} id={`otherNumberBlock_${rowIndex}_${colIndex}`} className='otherNumberBlock'
                            onClick={(event) => otherNumberClick(num, rowIndex, colIndex, event)} 
                            onContextMenu={(event) => removeOtherNumberClick(num, rowIndex, colIndex, event)}
                        >
                            <div className={`otherNumberBlockNum ${num == winNumber? "winningNumber":""} `}>{num}</div>
                            {totalChipValues[`${prefix}_${rowIndex}_${colIndex}`] > 0  &&
                                <div className='chip'>{totalChipValues[`${prefix}_${rowIndex}_${colIndex}`]}</div>}
                        </div>
                    ))}
                </div>
            ))}
        </div>
    );
}

export default OtherNumber;

///original


// function OtherNumber(){
    
//     var listofNumber = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, '2-1', 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, '2-1', 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, '2-1'];
//     const numberRowElements = [];

   

//     for (let i = 0; i < 3; i++){
//         const listInEachRow = listofNumber.slice(13 * i, 13 * (i + 1));

//         const numberBlockElements = listInEachRow.map((num, j)=>(
//             <div key={j} id={`otherNumberBlock_${i}${j}`} className='otherNumberBlock' onClick={(e)=>{otherNumberClick(num,j,e)}}>
//             <div className="otherNumberBlockNum">{num}</div>
//             </div>
//         ))
      
//         numberRowElements.push(<div key={i} id={`otherNumberRow_${i}`} className='otherNumberRow'>
//           {numberBlockElements}
//         </div>
//         )
//     }

//     const otherNumberClick = (num, index, e) => {
//         const clickedElement = e.currentTarget;
//             if (index !== 12) {
//                 const betNum = '' + num + '';
//                  setBet(betNum, 'straight', 35, clickedElement);
//             } else {
//                  setBet(listofNumber.slice(0, -1).join(','), 'column', 2, clickedElement);
//             }       
//     };

//     return(
//         <div className="otherNumber">
//             {numberRowElements}
//         </div>
//     ) 


//version 2 


// function OtherNumber({addCom}) {
//     const singleChipValue = 100;

//     var listofNumber = [
//         [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, '2-1'],
//         [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, '2-1'],
//         [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, '2-1']
//     ];

//     // Store selected element and its total chip value
//     const [selectedBlocks, setSelectedBlocks] = useState({});
    
//     // Left click an element
    
//     const otherNumberClick = (num, rowIndex, colIndex) => {
//         setSelectedBlocks(prevState => {
//             const newTotalChipValue = (prevState[`${rowIndex}_${colIndex}`] || 0) + singleChipValue;
//             var selectedNum = [num];
//             var odd = 35;
//             const item = [selectedNum, odd, newTotalChipValue];
//             addCom(item);
//         return {...prevState, [`${rowIndex}_${colIndex}`]: newTotalChipValue};
//         }); 
//     };
   
//     const removeSelectedBlocksItem = (rowIndex, colIndex) => {
//         setSelectedBlocks(prevState => 
//             {
//             const newState = {...prevState};
//             delete newState[`${rowIndex}_${colIndex}`];
//             return newState;
//         });
//     };

//     return (
//         <div className="otherNumber">
//             {listofNumber.map((row, rowIndex) => (
//                 <div key={rowIndex} id={`otherNumberRow_${rowIndex}`} className='otherNumberRow'>
//                     {row.map((num, colIndex) => (
//                         <div key={colIndex} id={`otherNumberBlock_${rowIndex}_${colIndex}`} className='otherNumberBlock' onClick={() => otherNumberClick(num, rowIndex, colIndex)} onContextMenu={(e) => { e.preventDefault(); selectedBlocks[`${rowIndex}_${colIndex}`] && removeSelectedBlocksItem(rowIndex, colIndex) }}>
//                             <div className="otherNumberBlockNum">{num}</div>
//                             {selectedBlocks[`${rowIndex}_${colIndex}`] && <div className='chip'>{selectedBlocks[`${rowIndex}_${colIndex}`]}</div>}
//                         </div>
//                     ))}
//                 </div>
//             ))}
//         </div>
//     );
// }

// export default OtherNumber;

//version 3
// function OtherNumber(props) {
    
//     const singleChipValue= 100
//         var listofNumber = [
//             [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, '2-1'],
//             [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, '2-1'],
//             [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, '2-1']
//         ];
    
       
//         const otherNumberClick = (num, rowIndex, colIndex, event) => {
//             const id = `${rowIndex}_${colIndex}`;
//             const selectedNum = (colIndex!==12)?[num]:listofNumber[rowIndex].slice(0,-1);
//             const odd = 35;
//             const totalChipValue = (props.totalChipValues[id] || 0) + singleChipValue;
//             props.updateTotalChipValue(id);
//             props.addCom(selectedNum, id, odd, totalChipValue, event);
//         };
    
    
//         const removeOtherNumberClick =(num, rowIndex, colIndex, event) =>{
//             const id = `${rowIndex}_${colIndex}`;
//             const selectedNum = (colIndex!==12)?[num]:listofNumber[rowIndex].slice(0,-1);
//             const odd = 35;
//             var totalChipValue = 0;
//             // props.updateTotalChipValue(id);
//             props.addCom(selectedNum, id, odd, totalChipValue, event);
//         }
//         return (
//             <div className="otherNumber">
//                 {listofNumber.map((row, rowIndex) => (
//                     <div key={rowIndex} id={`otherNumberRow_${rowIndex}`} className='otherNumberRow'>
//                         {row.map((num, colIndex) => (
//                             <div key={colIndex} id={`otherNumberBlock_${rowIndex}_${colIndex}`} className='otherNumberBlock' onClick={(event) => otherNumberClick(num, rowIndex, colIndex, event)} onContextMenu={(event)=>{event.preventDefault(); removeOtherNumberClick(num, rowIndex, colIndex, event)}}>
//                                 <div className="otherNumberBlockNum">{num}</div>
//                                 {props.totalChipValues[`${rowIndex}_${colIndex}` ] && <div className='chip'>{props.totalChipValues[`${rowIndex}_${colIndex}`]}</div>}
//                             </div>
//                         ))}
//                     </div>
//                 ))}
//             </div>
//         );
//     }
    
//     export default OtherNumber; 